# 快速看一下什么是「向上取整」 和「向下取整」

本题的主要难点在于区分「向上取整」 和「向下取整」 。

如果按照习惯直接写，可能会发现自己陷入了「死循环」中。

一个最简单的例子来说明两者的区别：[7,8]
* 使用「向下取整」，也就是默认的计算方式，(0+1)/2=0，取7
* 使用「向上取整」 ，也就是（0+1+1）/2=1，取8

可以看到：
* 「向下取整」会取两个数字中偏「右」的那个
* 「向上取整」会取两个数字中偏「左」的那个

# 为什么我们要在本题中同时使用者两种不同的方式呢？

答案是**因为只使用「向下取整」，在寻找右边界的时候不能保证搜索规模一定会变小，从而导致死循环。**

这样说可能有点抽象，我们用个例子来直观地感受一下什么时候会产生死循环。

假设我们的用例为：nums=[7,7]，target=7。

找左边界时用「向下取整」是不会出现问题的。

找右边界时：
* 使用「向下取整」：计算mid=（0+1）/2=0，由于下标为7，我们更新left=mid，此时陷入了死循环中，因为搜索范围无法缩小了。
* 使用「向上取整」，计算mid=（0+1+1）/2=1，更新left=mid，此时搜索规模缩小为[7]，也就得到了最终答案。

# 那是什么导致了以上的问题呢？

这是**排除逻辑**所导致的。

**在普通的二分查找中，我们可以保证搜索规模是一定在变小的。**

简单地回顾一下二分搜索，明显可以看出[left,right]这个搜索区间在不断变小，直到缩小到0为止，**因为它至少会排除掉一个元素:nums[mid]**。

* java

```java
if(nums[mid]==target)
    return mid;
if(nums[mid]>target)
    right=mid-1;
else
    left=mid+1;
```

但是在本题中，情况不一样了。**我们不一定会排除nums[mid]，因为nums[mid]可能是答案**。

**比如我们在找右边界的时候**，如果`nums[mid]==target`，那么我们只能更新`left=mid`，而不是`left=mid+1`，因为nums[mid]可能是我们想找的那个右边界，不能将其排除了。

结合具体的例子，可以想想我们上边的[7,7]中找7的右边界，由于我们是想找第二个7，但是我们的排除逻辑使得我们没法排除第一个7，搜索的规模永远都不会变小了。

这里可以与上面的普通二分搜索进行一下对比：

* java

```java
if(target==nums[mid])
    left=mid;
else if(target<nums[mid])
    right=mid-1;
else
    left=mid+1;
```

所以解决这道题的**重点就在于如何设计排除策略，使得搜索规模一定会变小。**

从上面我们可以知道

当`nums[mid]==target`时：
* 对于「左边界」：如果我们使用「向下取整」，mid总是会取靠「左」的那个数字。而「排除逻辑」使得我们排除mid右边（不包含mid）的所有元素，**那么就保证了至少会排除mid右边的那个数字。**
* 对于「右边界」：如果我们使用「向上取整」，mid总是会取靠「右」的那个数字。而「排除逻辑」使得我们排除mid左边（不包含mid）的所有元素，**那么就保证了至少会排除mid左边的那个数字。**

以下是代码：

* java

```java
class Solution {
    int[] nums;
    int n;
    int target;
    public int[] searchRange(int[] nums, int target) {
        int[] ans=new int[]{-1,-1};
        if(nums==null||nums.length==0)
            return ans;

        this.nums=nums;
        this.target=target;
        n=nums.length;

        ans[0]=findFirst();
        if(ans[0]==-1)
            return ans;
        ans[1]=findLast();
        return ans;
    }
    //寻找左边界
    private int findFirst(){
        int left=0,right=n-1;
        while(left<right){
            int mid=(left+right)/2;
            if(target==nums[mid])
                right=mid;
            else if(target<nums[mid])
                right=mid-1;
            else
                left=mid+1;
        }
        return nums[left]==target?left:-1;
    }
    //寻找右边界
    private int findLast(){
        int left=0,right=n-1;
        while(left<right){
            int mid=(left+right+1)/2;
            if(target==nums[mid])
                left=mid;
            else if(target<nums[mid])
                right=mid-1;
            else
                left=mid+1;
        }
        return nums[left]==target?left:-1;
        
    }
}
```

